#!/usr/bin/env python3
import os
import sys
import argparse
import subprocess
import time
from argparse import RawTextHelpFormatter

image_name = "atmoz/sftp"
image_tag = "debian"

def start_container(name):
    user = os.getenv('STITCH_TAP_SFTP_TEST_USERNAME')
    password = os.getenv('STITCH_TAP_SFTP_TEST_PASSWORD')
    upload_thingy = "upload"

    START_COMMAND = """
    sudo docker run -p {0}:22 --name {1} -d {2}:{3} {4}:{5}:::{6}
    """.format(27019, name, image_name, image_tag, user, password, upload_thingy)
    print("Starting Docker process sftp using command: {}".format(START_COMMAND))

    proc = subprocess.run(START_COMMAND, shell=True)
    if proc.returncode != 0:
        sys.exit("Exited with code: {}, the docker process failed to start.".format(proc.returncode))
    print("Process started successfully.")

    configure_container(name)
    populate_container(name)

def configure_container(name):
    container_id = get_container_id(name)
    # Copy authorized_keys and test csv files onto the docker image
    CONFIGURE_COMMAND = """
    docker cp ~/.ssh/id_rsa.pub {}:/etc/ssh/authorized_keys
    """.format(container_id)
    print(CONFIGURE_COMMAND)
    proc = subprocess.run(CONFIGURE_COMMAND, shell=True)

    if proc.returncode != 0:
        sys.exit("Exited with code: {}, the docker command failed.".format(proc.returncode))


def populate_container(name):
    container_id = get_container_id(name)
    user = os.getenv('STITCH_TAP_SFTP_TEST_USERNAME')
    # Copy authorized_keys and test csv files onto the docker image
    COPY_COMMAND = """
    docker cp ./bin/test_data.csv {}:/home/{}/
    """.format(container_id, user)
    print(COPY_COMMAND)
    proc = subprocess.run(COPY_COMMAND, shell=True)

    if proc.returncode != 0:
        sys.exit("Exited with code: {}, the docker command failed.".format(proc.returncode))

def get_ip_addr(name):
    IP_ADDR_COMMAND = "docker inspect {} | jq -r .[].NetworkSettings.IPAddress"
    print("Retrieving IP addr of mongodb container")
    ip_addr = subprocess.check_output(IP_ADDR_COMMAND.format(name), shell=True).decode('utf-8').rstrip()
    print(ip_addr)
    return ip_addr

def get_container_id(name):
    CONTAINER_ID_COMMAND = 'docker ps --filter "name=' + name + '" --format "{{.ID}}"'
    container_id = subprocess.check_output(CONTAINER_ID_COMMAND, shell=True).decode('utf-8').rstrip()
    print(container_id)
    return container_id

def stop_container(name):
    STOP_COMMAND = "sudo docker stop {0} && sudo docker rm {0}"

    print("Stopping Docker process {}".format(name))
    proc = subprocess.run(STOP_COMMAND.format(name), shell=True)
    if proc.returncode != 0:
        sys.exit("Exited with code: {}, the docker process failed to stop.".format(proc.returncode))
    print("Process stopped successfully")

def connect_to_db(name):
    CONNECT_COMMAND = "docker run -it --rm mongo mongo --host {} test -u {} -p {} --authenticationDatabase admin"

    ip_addr = get_ip_addr(name)

    print("Attempting to connect to running container using a mongo container")
    connect_command_format = CONNECT_COMMAND.format(ip_addr,
                                                    os.getenv('STITCH_TAP_MONGODB_TEST_DATABASE_USERNAME'),
                                                    os.getenv('STITCH_TAP_MONGODB_TEST_DATABASE_PASSWORD'))
    print(connect_command_format)
    # NB: Using call instead of run here because it is blocking
    #     This returns only an exit code.
    returncode = subprocess.call(connect_command_format,
                                 shell=True)
    if returncode != 0:
        sys.exit("Exited with code: {}, could not connect.".format(returncode))

DESCRIPTION = """
Manage docker instance for tap-sftp testing.

Uses environment variables:
    STITCH_TAP_SFTP_TEST_USERNAME
    STITCH_TAP_SFTP_TEST_PASSWORD
"""
parser = argparse.ArgumentParser(description=DESCRIPTION, formatter_class=RawTextHelpFormatter)
parser.add_argument('action', choices=['start','stop', 'connect'], help='action to perform with the container')
parser.add_argument('--name', help="name assigned to running docker process", default='sftp1')

def main():
    parsed_args = parser.parse_args()
    # Potential arguments to add: pull, changing docker cointainer, changing password
    if parsed_args.action == 'start':
        start_container(parsed_args.name)
    elif parsed_args.action == 'stop':
        stop_container(parsed_args.name)
    elif parsed_args.action == 'connect':
        connect_to_db(parsed_args.name)

if __name__ == "__main__":
    main()
